{"componentChunkName":"component---src-templates-md-files-js","path":"/상속-다형성-인터페이스/","result":{"data":{"markdownRemark":{"html":"<p>강사님께서 우리에게 첫 과제를 내주셨다.</p>\n<p><code>상속(Inheritance)</code> 과 <code>다형성(Polymorphism)</code> 그리고</p>\n<p><code>인터페이스(Interface)</code> 의 장점에 대해 생각해오기를 내주셨다.</p>\n<p>LG U+ 현업자분께서 말씀하신 것처럼 기술 블로그나 YouTube영상을 참고하여</p>\n<p>단순히 눈으로 본 정보를 옮겨 적는 것이 아닌</p>\n<p>머리로 이해한 정보를 정리하는 것을 목표로 한다.</p>\n<h1>1. 상속</h1>\n<ul>\n<li>부모 클래스의 멤버를 상속바다 자식 클래스에서 사용할 수 있는 것</li>\n<li>private, default 접근제한자는 상속 받지 못한다.</li>\n</ul>\n<h1>2. 다형성</h1>\n<ul>\n<li>변수 혹은 객체에 다양한 형태로 바리에이션 할 수 있는 것</li>\n</ul>\n<p>가장 대표적인 예시로 <code>오버라이딩(Overriding)</code>과 <code>오버로딩(Overloding)</code>이다.</p>\n<p>오버라이딩으로 부모 클래스의 함수를 자식 클래스에서 재정의 하여 사용하거나,</p>\n<p>오버로딩으로 동일한 함수명에 다양한 자료형을 매개변수로 받는 것이 모두 다형성의 특성이다.</p>\n<h1>3. 인터페이스</h1>\n<ul>\n<li>다중 상속이 가능하다.</li>\n<li>다이아몬드 문제를 피하면서 다중 상속이 가능하다.</li>\n<li>관련없는 클래스들끼리 관계를 만들 수 있다.</li>\n</ul>\n<p>사실 이번에 가장 새롭게 많이 알게된 내용이다.</p>\n<p>기존에는 단순히 Form 이나 규격을 정해두는 일종의 협업을 위한 기능 정도로만 알고 있었다.</p>\n<p>3가지 모두 <code>코드를 줄이는 것</code>과 <code>유지보수</code>를 위한 형식인 것을 확인할 수 있었다.</p>\n<p><a href=\"https://www.youtube.com/watch?v=T1BJzC9xb0g\">▶️   참고 영상</a></p>\n<p><a href=\"https://velog.io/@ung6860/JAVA%EB%8B%A4%ED%98%95%EC%84%B1-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9%EC%9D%98-%EC%B0%A8%EC%9D%B4\">🅱️참고 블로그</a></p>","frontmatter":{"date":"January 21, 2025","title":"상속, 다형성, 인터페이스 알아보기","thumbnail":null}}},"pageContext":{"slug":"/상속-다형성-인터페이스"}},"staticQueryHashes":["3649515864","63159454"],"slicesMap":{}}