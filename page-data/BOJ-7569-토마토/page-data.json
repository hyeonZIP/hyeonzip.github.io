{"componentChunkName":"component---src-templates-md-files-js","path":"/BOJ-7569-토마토/","result":{"data":{"markdownRemark":{"html":"<h1>0. 문제 링크</h1>\n<p><a href=\"https://www.acmicpc.net/problem/7569\">>>[BOJ] 7569번: 토마토&#x3C;&#x3C;</a></p>\n<h1>1. 문제 이해</h1>\n<ul>\n<li>토마토는 3차원 공간에 담긴다</li>\n<li>익은 토마토는 1, 덜익은 토마토는 0, 비어있으면 -1이다</li>\n<li>익은 토마토는 인접한 익지 않은 토마토를 익은 토마토로 바꾼다.\n<ul>\n<li>동서남북 그리고 상하로 총 6방향 1칸 이내에 있는 토마토는 인접한 토마토이다.</li>\n</ul>\n</li>\n<li>모든 토마토가 익을 때 까지의 <code>최소 일수</code>를 구한다.</li>\n<li>모든 토마토가 익을 수 없는 경우 -1 출력한다.</li>\n<li><code>매 회차마다</code> 익은 토마토로 부터 영향을 주어야한다.</li>\n</ul>\n<h1>2. 자료구조,알고리즘 선택</h1>\n<p><code>최소 일수</code>와 <code>매 회차마다</code>라는 키워드를 위해 BFS알고리즘과 Queue 자료구조를 사용한다.</p>\n<h1>3. 시간복잡도 계산</h1>\n<p>3중 for문 입력 = O(n<sup>3</sup>)<br>\nbfs문 : while문과 for문 = O(n<sup>2</sup>)</p>\n<p>지난번부터 알고리즘을 풀 때 시간복잡도를 고려하기 시작하니</p>\n<p>3중 for문 처리로 인한 시간초과를 생각했다.</p>\n<p>그리고 2차원 배열로 처리하여 3차원 처럼 생각해서 dx dy 의 이동 값을 바꿔줘야하나 라고 생각했다.</p>\n<p>하지만 잘 통과되었고 100 * 100 * 100 입력이 시간제한인 1초를 넘지 않는 것을 알 수 있었다.</p>\n<blockquote>\n<p>Q. 그럼 몇번 입력이 돼야 1초를 넘을까?</p>\n<blockquote>\n<p>A. <a href=\"https://www.acmicpc.net/board/view/125702\">다이아1 Solver의 말을 따르면</a> 연산의 총 횟수가 1억회 이하일 경우,</p>\n<blockquote>\n<p>일반적으로 1초를 넘지 않는다고 한다.</p>\n</blockquote>\n</blockquote>\n<p>Q. 그럼 메모리 제한이 있을 경우에는?</p>\n<blockquote>\n<p>A. 아직 메모리 제한 문제는 만나본 적이 없지만 시간 제한을 검색하다 알게되었다.</p>\n<blockquote>\n<p>512MB인 경우 120,000,000개의 int</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>2MB인 경우 500,000개의 int</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p><a href=\"https://syh39.github.io/algorithm/algorithm_2/\">>>메모리 제한 출처&#x3C;&#x3C;</a></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h1>4. 다른 풀이</h1>\n<p>나는 Position 객체에서 day 멤버변수를 추가했다.</p>\n<p>큐에 offer되지 않은 Position객체에서 day값을</p>\n<p>static 변수인 answerDay에 Math.max()하여 큰 값이 나올 때마다 업데이트 해주었다.</p>\n<p>그리고 토마토 전염이 끊났을 때 3차원 배열을 한번더 탐색하며 안익은 토마토가 있는지 검사하였다.</p>\n<p>이와 다르게 한 풀이로</p>\n<p>기존에 3차원 배열에 데이터를 입력할 때</p>\n<p>익은 토마토의 정보를 큐에 offer 하듯이</p>\n<p>익지 않은 토마토가 입력되면 단순히 count++를 하고</p>\n<p>익지 않은 토마토가 익은 토마토로 변경 되는 순간에 count--를 하여</p>\n<p>박스 내 익지 않은 토마토가 있는지 판별하는 경우를 보았다.</p>\n<h1>5. 전체 풀이</h1>\n<pre><code>package jaehyeon.week1;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Week1_7569 {\r\n\r\n    static int M;\r\n    static int N;\r\n    static int H;\r\n\r\n    static final int[] dx = {1, -1, 0, 0, 0, 0};//동 > 서 > 남 > 북 > 상 > 하\r\n    static final int[] dy = {0, 0, 1, -1, 0, 0};\r\n    static final int[] dz = {0, 0, 0, 0, 1, -1};\r\n\r\n    static int[][][] map;\r\n    static boolean[][][] visited;\r\n\r\n    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    static StringTokenizer st;\r\n    static Queue&#x3C;Position> q = new LinkedList&#x3C;>();\r\n\r\n    static int answerDay = 0;\r\n\r\n    static class Position {\r\n        int x;\r\n        int y;\r\n        int z;\r\n        int day;\r\n        public Position(int x, int y, int z, int day) {\r\n            this.x = x;\r\n            this.y = y;\r\n            this.z = z;\r\n            this.day = day;\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws IOException {\r\n\r\n        run();\r\n    }//main\r\n\r\n    private static void run() throws IOException {\r\n        inputBoxSizeData();\r\n        inputTomatoBoxData();\r\n\r\n        bfs();\r\n\r\n        if(isExistUninfectedTomato()){\r\n            System.out.println(answerDay);\r\n        }\r\n        else{\r\n            System.out.println(-1);\r\n        }\r\n\r\n    }\r\n\r\n    private static void inputBoxSizeData() throws IOException {\r\n        st = new StringTokenizer(br.readLine());\r\n\r\n        M = Integer.parseInt(st.nextToken());//가로 칸의 수\r\n        N = Integer.parseInt(st.nextToken());//세로 칸의 수\r\n        H = Integer.parseInt(st.nextToken());//상자 층의 수\r\n\r\n        map = new int[H][N][M];\r\n        visited = new boolean[H][N][M];\r\n    }\r\n\r\n    private static void inputTomatoBoxData() throws IOException {\r\n\r\n        for (int z = 0; z &#x3C; H; z++) {\r\n            for (int y = 0; y &#x3C; N; y++) {\r\n                st = new StringTokenizer(br.readLine());\r\n                for (int x = 0; x &#x3C; M; x++) {\r\n                    int tomatoBoxInventory = Integer.parseInt(st.nextToken());\r\n                    map[z][y][x] = tomatoBoxInventory;\r\n                    if(tomatoBoxInventory == 1){\r\n                        q.offer(new Position(x,y,z,0));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static void bfs() {\r\n        while (!q.isEmpty()) {\r\n            Position p = q.poll();\r\n\r\n            for (int i = 0; i &#x3C; 6; i++) {\r\n                int px = p.x + dx[i];\r\n                int py = p.y + dy[i];\r\n                int pz = p.z + dz[i];\r\n                int day = p.day;\r\n\r\n                if(isValidatePosition(px,py,pz)){\r\n                    infectTomato(px,py,pz,day);\r\n                }\r\n                else{\r\n                    answerDay = Math.max(answerDay, day);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static boolean isValidatePosition(int x,int y,int z){\r\n        return isRange(x,y,z) &#x26;&#x26; !isVisited(x,y,z) &#x26;&#x26; isExistTomato(x,y,z);\r\n    }\r\n\r\n    //좌표가 유효 범위인지\r\n    private static boolean isRange(int x, int y, int z) {\r\n        return 0 &#x3C;= x &#x26;&#x26; 0 &#x3C;= y &#x26;&#x26; 0 &#x3C;= z &#x26;&#x26; x &#x3C; M &#x26;&#x26; y &#x3C; N &#x26;&#x26; z &#x3C; H;\r\n    }\r\n\r\n    //좌표를 방문했는지\r\n    private static boolean isVisited(int x,int y,int z){\r\n        return visited[z][y][x];\r\n    }\r\n\r\n    //좌표에 덜익은 토마토가 있는지\r\n    private static boolean isExistTomato(int x, int y, int z){\r\n        return map[z][y][x] == 0;\r\n    }\r\n\r\n    //토마토 감염시키기\r\n    private static void infectTomato(int x, int y, int z,int day){\r\n        map[z][y][x] = 1;\r\n        visited[z][y][x] = true;\r\n        q.offer(new Position(x,y,z,day+1));\r\n    }\r\n\r\n    private static boolean isExistUninfectedTomato(){\r\n        for (int z = 0; z &#x3C; H; z++) {\r\n            for (int y = 0; y &#x3C; N; y++) {\r\n                for (int x = 0; x &#x3C; M; x++) {\r\n                    if(map[z][y][x] == 0){\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\n</code></pre>","frontmatter":{"date":"February 05, 2025","title":"[BOJ] 7569번: 토마토 [JAVA]","tag":"BOJ,BFS","thumbnail":null}}},"pageContext":{"slug":"/BOJ-7569-토마토"}},"staticQueryHashes":["3649515864","63159454"],"slicesMap":{}}