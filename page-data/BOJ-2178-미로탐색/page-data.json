{"componentChunkName":"component---src-templates-md-files-js","path":"/BOJ-2178-미로탐색/","result":{"data":{"markdownRemark":{"html":"<h1>0. 문제 링크</h1>\n<p><a href=\"https://www.acmicpc.net/problem/2178\">>>[BOJ] 2178번: 미로 탐색&#x3C;&#x3C;</a></p>\n<h1>1. 문제 이해</h1>\n<p>BFS의 최단 경로 문제</p>\n<h1>2. 자료구조,알고리즘 선택</h1>\n<p>\"(1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수\" = 최단경로 = BFS</p>\n<blockquote>\n<p>Q. Pair 클래스의 멤버 변수를 통해 결과를 출력하기 VS map[][]에 값을 넣어 출력하기</p>\n<blockquote>\n<p>A.</p>\n<blockquote>\n<ol>\n<li>distance[][]라는 별도의 저장 배열 선언</li>\n<li>map[][]에 바로 반영</li>\n<li>Pair클래스에 result 멤버 변수를 저장한 건 유일(?)</li>\n</ol>\n<p>1번, 2번도 고민했지만 3번이 가장 구현 속도가 빠를 것 같아서 사용하였다.</p>\n</blockquote>\n</blockquote>\n<p>Q. Queue&#x3C;?> Pair 클래스 이외에 사용가능한 자료형</p>\n<blockquote>\n<p>A. 주로 Pair를 선언하고 int[]를 사용하기도 함<br>\nmap의 Key-Value의 특성을 사용할 곳은 아니라고 생각해서 사용하지 않았다.</p>\n</blockquote>\n</blockquote>\n<h1>3. 시간복잡도 계산</h1>\n<p>2중 for문 입력 : O(n<sup>2</sup>)\r\nbfs문 : O(n<sup>2</sup>)</p>\n<h1>4. 다른 풀이</h1>\n<p>주로 char를 int로 변환하려면 <code>s.charAt(0) - '0'</code>을 한다.</p>\n<p>char 타입에 <code>(int)</code>로 캐스팅을 하면 ASCII 값이 들어가는 점을 이용한 것이다.</p>\n<p><code>Integer.parseInt(s)</code>는 매개변수로 String을 받는다.</p>\n<p>그럼 char 타입도 변환할 수 있는게 있지 않을까?</p>\n<p><code>Character.getNumericValue(s.charAt(0))</code>라는 함수를 통해 정수형으로 반환할 수 있다.</p>\n<h1>5. 전체 풀이</h1>\n<pre><code>package problemSolving;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Main {\r\n\t\r\n\tpublic static class Pair{\r\n\t\tint x;\r\n\t\tint y;\r\n\t\tint result;\r\n\t\tpublic Pair(int x, int y, int result) {\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.result = result;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\r\n\t\tint N = Integer.parseInt(st.nextToken());\r\n\t\tint M = Integer.parseInt(st.nextToken());\r\n\t\t\r\n\t\tint[] dx = {0,0,1,-1};\r\n\t\tint[] dy = {1,-1,0,0};\r\n\t\t\r\n\t\tint[][] map = new int[N+1][M+1];\r\n\t\tboolean[][] visited = new boolean[N+1][M+1];\r\n\t\t\r\n\t\tfor(int i=1; i&#x3C;=N; i++) {\r\n\t\t\tString s = br.readLine();\r\n\t\t\t\r\n\t\t\tfor(int j=0; j&#x3C;M; j++) {\r\n\t\t\t\tInteger.parseInt(s)\r\n\t\t\t\t\r\n\t\t\t\tmap[i][j+1] = Character.getNumericValue(s.charAt(j));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tQueue&#x3C;Pair> q = new LinkedList&#x3C;>();\r\n\t\t\r\n\t\tq.offer(new Pair(1,1,1));\r\n\t\tvisited[1][1] = true;\r\n\t\t\r\n\t\twhile(!q.isEmpty()) {\r\n\t\t\tPair p = q.poll();\r\n\t\t\t\r\n\t\t\tfor(int i=0; i&#x3C;4; i++) {\r\n\t\t\t\tint px = p.x + dx[i];\r\n\t\t\t\tint py = p.y + dy[i];\r\n\t\t\t\t\r\n\t\t\t\tif(0&#x3C;px &#x26;&#x26; px &#x3C; N+1 &#x26;&#x26; 0&#x3C;py &#x26;&#x26; py&#x3C;M+1 &#x26;&#x26; map[px][py] != 0 &#x26;&#x26; visited[px][py] != true) {\r\n\t\t\t\t\tint result = p.result +1;\r\n\t\t\t\t\tq.offer(new Pair(px, py,result));\r\n\t\t\t\t\tvisited[px][py] = true;\r\n\t\t\t\t\tif(px == N &#x26;&#x26; py == M) {\r\n\t\t\t\t\t\tSystem.out.println(result);\r\n\t\t\t\t\t\tq.clear();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\n</code></pre>","frontmatter":{"date":"February 02, 2025","title":"[BOJ] 2178번: 미로 탐색 [JAVA]","tag":"BOJ,BFS","thumbnail":null}}},"pageContext":{"slug":"/BOJ-2178-미로탐색"}},"staticQueryHashes":["3649515864","63159454"],"slicesMap":{}}