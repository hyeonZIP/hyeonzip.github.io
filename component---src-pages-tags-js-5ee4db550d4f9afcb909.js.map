{"version":3,"file":"component---src-pages-tags-js-5ee4db550d4f9afcb909.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/header.js","webpack://gatsby-starter-default/./src/components/layout.js","webpack://gatsby-starter-default/./src/components/postList.js","webpack://gatsby-starter-default/./src/components/seo.js","webpack://gatsby-starter-default/./src/pages/tags.js"],"sourcesContent":["import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nconst Header = ({ siteTitle, theme, toggleTheme }) => (\r\n  <header\r\n    style={{\r\n      margin: `0 auto`,\r\n      padding: `var(--space-3) var(--size-gutter)`,\r\n      display: `flex`,\r\n      alignItems: `center`,\r\n      justifyContent: `space-between`,\r\n      boxShadow: `1px 0.1px 5px 3px #303030`,\r\n    }}\r\n  >\r\n    <Link\r\n      to=\"/\"\r\n      style={{\r\n        fontSize: `var(--font-lg)`,\r\n        textDecoration: `none`\r\n      }}\r\n    >\r\n      {siteTitle}\r\n    </Link>\r\n    <div onClick={toggleTheme} style={{ cursor: 'pointer'}}>\r\n      {theme === 'dark' ? (\r\n        <svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 512 512\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z\"></path></svg>\r\n      ) : (\r\n        <svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 512 512\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M283.211 512c78.962 0 151.079-35.925 198.857-94.792 7.068-8.708-.639-21.43-11.562-19.35-124.203 23.654-238.262-71.576-238.262-196.954 0-72.222 38.662-138.635 101.498-174.394 9.686-5.512 7.25-20.197-3.756-22.23A258.156 258.156 0 0 0 283.211 0c-141.309 0-256 114.511-256 256 0 141.309 114.511 256 256 256z\"></path></svg>\r\n      )}\r\n    </div>\r\n  </header>\r\n)\r\n\r\nexport default Header\r\n","import React, {useState,useEffect,useCallback} from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nimport Header from \"./header\"\r\nimport \"@fontsource/noto-sans-kr\"\r\nimport \"@fontsource/noto-sans-kr/700.css\";\r\nimport \"./layout.css\"\r\n\r\nconst Layout = ({ children }) => {\r\n  // 초기 상태를 'light'로 설정\r\n  const [theme, setTheme] = useState('light');\r\n\r\n  // 클라이언트에서만 실행되는 로직\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined') {\r\n      // 로컬 스토리지에서 사용자 테마 가져오기\r\n      const localStorageTheme = localStorage.getItem('color-theme');\r\n      // OS 기본 테마 확인\r\n      const osTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\r\n      // 최종 테마 결정\r\n      const currentTheme = localStorageTheme || osTheme;\r\n\r\n      // 상태와 DOM에 테마 적용\r\n      setTheme(currentTheme);\r\n      document.documentElement.setAttribute('color-theme', currentTheme);\r\n      localStorage.setItem('color-theme', currentTheme);\r\n    }\r\n  }, []);\r\n\r\n  // 테마 전환 함수\r\n  const toggleTheme = useCallback(() => {\r\n    setTheme(prevTheme => {\r\n      const newTheme = prevTheme === 'light' ? 'dark' : 'light';\r\n      if (typeof window !== 'undefined') {\r\n        document.documentElement.setAttribute('color-theme', newTheme);\r\n        localStorage.setItem('color-theme', newTheme);\r\n      }\r\n      return newTheme;\r\n    });\r\n  }, []);\r\n\r\n  const data = useStaticQuery(graphql`\r\n    query SiteTitleQuery {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  return (\r\n    <>\r\n      <Header siteTitle={data.site.siteMetadata?.title || `Title`} theme={theme} toggleTheme={toggleTheme} />\r\n      <div\r\n        style={{\r\n          margin: `0 auto`,\r\n          maxWidth: `var(--size-content)`,\r\n          padding: `var(--size-gutter)`,\r\n        }}\r\n      >\r\n        <main>{children}</main>\r\n        <footer\r\n          style={{\r\n            marginTop: `var(--space-5)`,\r\n            fontSize: `var(--font-sm)`,\r\n          }}\r\n        >\r\n          © hyeonZIP &middot; Refered to\r\n          {` `}\r\n          <a href=\"https://hudi.blog/\" style={{fontSize: '14px', textDecoration: 'underline'}}>@hudi</a>\r\n          {` `}\r\n          Theme\r\n        </footer>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\n\r\nconst PostList = ({ posts, tag, series, search }) => {\r\n  return (\r\n    <div>\r\n      {/* 존재하는 모든 포스트 반복 생성 */}\r\n      {posts.map(({ node }) => {\r\n        return (\r\n          <div key={node.id}>\r\n            <Link className=\"i-title\" to={node.fields.slug}>{node.frontmatter.title}</Link>\r\n            <div className=\"i-date\">{node.frontmatter.date}</div>\r\n            <p className=\"i-excerpt\">{node.excerpt}</p>\r\n            {(node.frontmatter.tag != null) ? node.frontmatter.tag.split(\",\").map((tag) => (\r\n              <span className=\"tag\" key={tag}>\r\n                <Link to={`/tags?tag=${encodeURIComponent(tag)}`}>{tag}</Link>\r\n              </span>\r\n            )) : \"\"}\r\n            <hr />\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","/**\r\n * SEO component that queries for data with\r\n * Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nfunction Seo({ description, title, children }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <>\r\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\r\n      <meta name=\"description\" content={metaDescription} />\r\n      <meta property=\"og:title\" content={title} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta property=\"og:type\" content=\"website\" />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\r\n      <meta name=\"twitter:title\" content={title} />\r\n      <meta name=\"twitter:description\" content={metaDescription} />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo\r\n","// import * as React from \"react\"\r\nimport React, {useState} from \"react\";\r\nimport { Link, graphql } from \"gatsby\"\r\nimport {useLocation} from \"@reach/router\";\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\nimport PostList from \"../components/postList\";\r\n\r\nexport default ({data}) => {\r\n    const location = useLocation();\r\n    const queryParams = new URLSearchParams(location.search);\r\n    const selectedTag = queryParams.get(\"tag\");\r\n\r\n    const [filteredPosts, setFilteredPosts] = useState(data.allMarkdownRemark.edges)\r\n\r\n  // // selectedTag가 있을 경우에만 필터링\r\n  //   const filteredPosts = selectedTag\r\n  //   ? data.allMarkdownRemark.edges.filter(\r\n  //       ({ node }) => node.frontmatter.tag === selectedTag\r\n  //     )\r\n  //   : data.allMarkdownRemark.edges\r\n\r\n  //태그를 클릭 할 때마다 setFilteredPosts가 동작해서 현재 선택된 태그를 변경하고\r\n  //변경된 태그에 따라 게시물 다르게 보여주기\r\n  //\r\n\r\n    return(\r\n        <Layout>\r\n        <h1>Hi from the second page</h1>\r\n        <p>Welcome to page 2</p>\r\n        <br/><br/><br/>\r\n        <h1>선택된 태그 : {selectedTag}</h1>\r\n        <PostList posts={filteredPosts}/>\r\n      </Layout>\r\n    );\r\n};\r\n\r\nexport const Head = () => <Seo title=\"Page two\" />\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          id\r\n          frontmatter {\r\n            title\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            tag\r\n            series\r\n          }\r\n          fields{\r\n            slug\r\n          }\r\n          excerpt(truncate: true, pruneLength: 223)          \r\n        }\r\n      }\r\n    }\r\n  }\r\n`"],"names":["_ref","siteTitle","theme","toggleTheme","React","style","margin","padding","display","alignItems","justifyContent","boxShadow","Link","to","fontSize","textDecoration","onClick","cursor","stroke","fill","viewBox","height","width","xmlns","d","_data$site$siteMetada","children","setTheme","useState","useEffect","window","localStorageTheme","localStorage","getItem","osTheme","matchMedia","matches","currentTheme","document","documentElement","setAttribute","setItem","useCallback","prevTheme","newTheme","data","useStaticQuery","Header","site","siteMetadata","title","maxWidth","marginTop","href","posts","tag","series","search","map","_ref2","node","key","id","className","fields","slug","frontmatter","date","excerpt","split","encodeURIComponent","_site$siteMetadata","_site$siteMetadata2","description","metaDescription","defaultTitle","name","content","property","author","location","useLocation","selectedTag","URLSearchParams","get","filteredPosts","setFilteredPosts","allMarkdownRemark","edges","Layout","PostList","Head","Seo"],"sourceRoot":""}